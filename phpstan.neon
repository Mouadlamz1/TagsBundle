includes:
    - vendor/phpstan/phpstan-symfony/extension.neon
    - vendor/phpstan/phpstan-strict-rules/rules.neon

parameters:
    checkMissingIterableValueType: false

    ignoreErrors:
        # Symfony:
        - '#Call to an undefined method Symfony\\Component\\Config\\Definition\\Builder\\NodeParentInterface::booleanNode\(\).#'
        -
            message: '#Call to an undefined method object::isPropagationStopped\(\)#'
            path: bundle/Core/Event/TagsService.php

        - '#Call to method Symfony\\Component\\HttpFoundation\\Request::hasSession\(\) will always evaluate to true.#'

        # eZ Platform
        - '#Method eZ\\Publish\\Core\\Persistence\\Database\\\w+Query::\w+\(\) invoked with \d+ parameters?, \d+ required.#'
        - '#Method eZ\\Publish\\Core\\Persistence\\Database\\Expression::\w+\(\) invoked with \d+ parameters?, \d+ required.#'
        - '#eZ\\Publish\\Core\\Persistence\\Database\\\w+Query::\w+\(\) expects string, int given.#'
        - '#eZ\\Publish\\Core\\Persistence\\Database\\Expression::\w+\(\) expects string, int given.#'

        # Doctrine DBAL
        - '#Cannot call method fetchAll\(\) on Doctrine\\DBAL\\Driver\\Statement\|int#'

        # Tags Bundle specifics
        - '#Netgen\\TagsBundle\\Core\\FieldType\\Tags\\Value::__construct\(\) does not call parent constructor#'
        - '#Method .*::getRelatedContent\(\) should return .* but returns .*#'

        # Errors caused by public properties in eZ Platform
        - '#Call to function is_string\(\) with string will always evaluate to true.#'
        - '#Call to function is_array\(\) with array(<.*>)? will always evaluate to true.#'
        - '#Call to function is_bool\(\) with bool will always evaluate to true.#'
        - '#Instanceof between (.*) and (.*) will always evaluate to true.#'
        - "#Casting to array something that's already array.#"
        - "#Casting to bool something that's already bool.#"
        - "#Casting to int something that's already int.#"
        - '#should be contravariant with parameter#'
        - '#should be covariant with return type#'
